// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: shell.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShellData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ShellData) Reset() {
	*x = ShellData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellData) ProtoMessage() {}

func (x *ShellData) ProtoReflect() protoreflect.Message {
	mi := &file_shell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellData.ProtoReflect.Descriptor instead.
func (*ShellData) Descriptor() ([]byte, []int) {
	return file_shell_proto_rawDescGZIP(), []int{0}
}

func (x *ShellData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_shell_proto protoreflect.FileDescriptor

var file_shell_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x20, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x3d, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x12, 0x34, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x28, 0x01, 0x30, 0x01, 0x42, 0x10, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x2f, 0x70,
	0x62, 0x3b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_shell_proto_rawDescOnce sync.Once
	file_shell_proto_rawDescData = file_shell_proto_rawDesc
)

func file_shell_proto_rawDescGZIP() []byte {
	file_shell_proto_rawDescOnce.Do(func() {
		file_shell_proto_rawDescData = protoimpl.X.CompressGZIP(file_shell_proto_rawDescData)
	})
	return file_shell_proto_rawDescData
}

var file_shell_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_shell_proto_goTypes = []interface{}{
	(*ShellData)(nil), // 0: network.shell_data
}
var file_shell_proto_depIdxs = []int32{
	0, // 0: network.Shell.Exec:input_type -> network.shell_data
	0, // 1: network.Shell.Exec:output_type -> network.shell_data
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shell_proto_init() }
func file_shell_proto_init() {
	if File_shell_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shell_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shell_proto_goTypes,
		DependencyIndexes: file_shell_proto_depIdxs,
		MessageInfos:      file_shell_proto_msgTypes,
	}.Build()
	File_shell_proto = out.File
	file_shell_proto_rawDesc = nil
	file_shell_proto_goTypes = nil
	file_shell_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShellClient is the client API for Shell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShellClient interface {
	Exec(ctx context.Context, opts ...grpc.CallOption) (Shell_ExecClient, error)
}

type shellClient struct {
	cc grpc.ClientConnInterface
}

func NewShellClient(cc grpc.ClientConnInterface) ShellClient {
	return &shellClient{cc}
}

func (c *shellClient) Exec(ctx context.Context, opts ...grpc.CallOption) (Shell_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Shell_serviceDesc.Streams[0], "/network.Shell/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &shellExecClient{stream}
	return x, nil
}

type Shell_ExecClient interface {
	Send(*ShellData) error
	Recv() (*ShellData, error)
	grpc.ClientStream
}

type shellExecClient struct {
	grpc.ClientStream
}

func (x *shellExecClient) Send(m *ShellData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shellExecClient) Recv() (*ShellData, error) {
	m := new(ShellData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShellServer is the server API for Shell service.
type ShellServer interface {
	Exec(Shell_ExecServer) error
}

// UnimplementedShellServer can be embedded to have forward compatible implementations.
type UnimplementedShellServer struct {
}

func (*UnimplementedShellServer) Exec(Shell_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterShellServer(s *grpc.Server, srv ShellServer) {
	s.RegisterService(&_Shell_serviceDesc, srv)
}

func _Shell_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServer).Exec(&shellExecServer{stream})
}

type Shell_ExecServer interface {
	Send(*ShellData) error
	Recv() (*ShellData, error)
	grpc.ServerStream
}

type shellExecServer struct {
	grpc.ServerStream
}

func (x *shellExecServer) Send(m *ShellData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shellExecServer) Recv() (*ShellData, error) {
	m := new(ShellData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Shell_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.Shell",
	HandlerType: (*ShellServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _Shell_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shell.proto",
}
